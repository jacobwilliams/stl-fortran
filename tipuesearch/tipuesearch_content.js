var tipuesearch = {"pages":[{"title":" stl-fortran ","text":"stl-fortran Brief description Fortran code for generating STL (STereoLithography) files. License The stl-fortran source code and related files and documentation are distributed under a permissive free software license (BSD-style). Documentation The latest API documentation can be found here . This was generated from the source code using FORD (note that the build script will also generate these files). Reference https://en.wikipedia.org/wiki/STL_(file_format) Developer Info Jacob Williams","tags":"home","loc":"index.html"},{"title":"stl_module.f90 – stl-fortran","text":"Contents Modules stl_module Source Code stl_module.f90 Source Code !******************************************************************************** !> !  STL (STereoLithography) file library. ! !### Author !  * Jacob Williams, Jan 12, 2020. ! !### License !  * BSD-3 ! !### Reference !  * https://en.wikipedia.org/wiki/STL_(file_format) module stl_module use , intrinsic :: iso_c_binding use , intrinsic :: iso_fortran_env , only : wp => real64 , error_unit implicit none private ! constants: real ( wp ), parameter :: zero = 0.0_wp real ( wp ), parameter :: one = 1.0_wp real ( wp ), parameter :: deg2rad = acos ( - 1.0_wp ) / 18 0.0_wp !! degrees to radians real ( wp ), dimension ( 3 ), parameter :: x_unit = [ one , zero , zero ] !! x-axis unit vector real ( wp ), dimension ( 3 ), parameter :: y_unit = [ zero , one , zero ] !! y-axis unit vector real ( wp ), dimension ( 3 ), parameter :: z_unit = [ zero , zero , one ] !! z-axis unit vector type :: plate !! a 3D triangular plate. !! [note that the order of the vertices defines the !! surface normal via the right-hand rule] real ( wp ), dimension ( 3 ) :: v1 = zero !! first vertex real ( wp ), dimension ( 3 ) :: v2 = zero !! second vertex real ( wp ), dimension ( 3 ) :: v3 = zero !! third vertex end type plate type , public :: stl_file !! the main class for STL file I/O. private integer :: n_plates = 0 !! number of plates integer :: chunk_size = 1000 !! expand `plates` array in chunks of this size type ( plate ), dimension (:), allocatable :: plates !! the array of plates contains private procedure , public :: write_ascii_stl_file procedure , public :: write_binary_stl_file procedure , public :: add_plate procedure , public :: add_sphere procedure , public :: add_cylinder procedure , public :: add_curve procedure , public :: add_cone procedure , public :: generate_circle procedure , public :: shift_mesh procedure , public :: set_chunk_size procedure , public :: destroy => destroy_stl_file procedure :: compute_vertex_scale end type stl_file contains !******************************************************************************** !******************************************************************************** !> !  Destroy an `stl_file`. subroutine destroy_stl_file ( me ) implicit none class ( stl_file ), intent ( inout ) :: me if ( allocated ( me % plates )) deallocate ( me % plates ) me % n_plates = 0 end subroutine destroy_stl_file !******************************************************************************** !******************************************************************************** !> !  Set the chunk size in the class. subroutine set_chunk_size ( me , chunk_size ) class ( stl_file ), intent ( inout ) :: me integer , intent ( in ) :: chunk_size !! must be >0 me % chunk_size = max ( 1 , chunk_size ) end subroutine set_chunk_size !******************************************************************************** !******************************************************************************** !> !  Add a plate to the class. subroutine add_plate ( me , v1 , v2 , v3 ) class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! first vertex real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! second vertex real ( wp ), dimension ( 3 ), intent ( in ) :: v3 !! third vertex integer :: n !! actual size of `plates` array in the class type ( plate ), dimension (:), allocatable :: tmp !! for resizing the `plates` array if ( allocated ( me % plates )) then n = size ( me % plates ) if ( me % n_plates == n ) then ! have to add another chunk allocate ( tmp ( n + me % chunk_size )) tmp ( 1 : n ) = me % plates tmp ( n + 1 )% v1 = v1 tmp ( n + 1 )% v2 = v2 tmp ( n + 1 )% v3 = v3 call move_alloc ( tmp , me % plates ) me % n_plates = me % n_plates + 1 return else ! add to next element in the class me % n_plates = me % n_plates + 1 end if else allocate ( me % plates ( me % chunk_size )) me % n_plates = 1 end if me % plates ( me % n_plates )% v1 = v1 me % plates ( me % n_plates )% v2 = v2 me % plates ( me % n_plates )% v3 = v3 end subroutine add_plate !******************************************************************************** !******************************************************************************** !> !  Generate a binary STL file. ! !### Notes ! !  The file format is: !``` !  UINT8[80] – Header !  UINT32 – Number of triangles !  foreach triangle !    REAL32[3] – Normal vector !    REAL32[3] – Vertex 1 !    REAL32[3] – Vertex 2 !    REAL32[3] – Vertex 3 !    UINT16 – Attribute byte count !  end !``` subroutine write_binary_stl_file ( me , filename , istat , bounding_box ) implicit none class ( stl_file ), intent ( in ) :: me character ( len =* ), intent ( in ) :: filename !! STL file name integer , intent ( out ) :: istat !! `iostat` code real ( wp ), intent ( in ), optional :: bounding_box !! scale vertices so that model fits in a !! box of this size (if <=0, no scaling is done) integer :: iunit !! file unit number integer :: i !! counter integer ( c_int32_t ) :: n_plates !! number of plates [32 bits] real ( c_float ), dimension ( 3 ) :: n !! normal vector [32 bits] real ( c_float ), dimension ( 3 ) :: v1 , v2 , v3 !! vertex vectors [32 bits] real ( wp ) :: scale !! scale factor integer ( c_int16_t ), parameter :: z = 0 !! Attribute byte count [16 bits] character ( kind = c_char , len = 80 ), parameter :: header = repeat ( ' ' , 80 ) !! [8 bits x 80] n_plates = int ( me % n_plates , kind = c_int32_t ) scale = me % compute_vertex_scale ( bounding_box ) ! open the binary file: open ( newunit = iunit ,& file = filename ,& action = 'WRITE' ,& status = 'REPLACE' ,& form = 'UNFORMATTED' , & access = 'STREAM' , & iostat = istat ) if ( istat == 0 ) then ! write the file: write ( iunit ) header , n_plates do i = 1 , me % n_plates n = real ( normal ( me % plates ( i )% v1 , me % plates ( i )% v2 , me % plates ( i )% v3 ), c_float ) v1 = real ( me % plates ( i )% v1 * scale , c_float ) v2 = real ( me % plates ( i )% v2 * scale , c_float ) v3 = real ( me % plates ( i )% v3 * scale , c_float ) write ( iunit ) n , v1 , v2 , v3 , z end do ! close the file: close ( iunit ) end if end subroutine write_binary_stl_file !******************************************************************************** !******************************************************************************** !> !  Generate an ascii STL file. subroutine write_ascii_stl_file ( me , filename , modelname , istat , bounding_box ) implicit none class ( stl_file ), intent ( in ) :: me character ( len =* ), intent ( in ) :: filename !! STL file name character ( len =* ), intent ( in ) :: modelname !! the solid name (should not contain spaces) integer , intent ( out ) :: istat !! `iostat` code real ( wp ), intent ( in ), optional :: bounding_box !! scale vertices so that model fits in a !! box of this size (if <=0, no scaling is done) integer :: iunit !! file unit number integer :: i !! counter real ( wp ) :: scale !! scale factor character ( len =* ), parameter :: fmt = '(A,1X,E30.16,1X,E30.16,1X,E30.16)' !! format statement for vectors scale = me % compute_vertex_scale ( bounding_box ) ! open the text file: open ( newunit = iunit , file = trim ( filename ), status = 'REPLACE' , iostat = istat ) if ( istat == 0 ) then ! write the file: write ( iunit , '(A)' ) 'solid ' // trim ( modelname ) do i = 1 , me % n_plates write ( iunit , fmt ) 'facet normal' , normal ( me % plates ( i )% v1 , me % plates ( i )% v2 , me % plates ( i )% v3 ) write ( iunit , '(A)' ) '    outer loop' write ( iunit , fmt ) '        vertex' , me % plates ( i )% v1 * scale write ( iunit , fmt ) '        vertex' , me % plates ( i )% v2 * scale write ( iunit , fmt ) '        vertex' , me % plates ( i )% v3 * scale write ( iunit , '(A)' ) '    end loop' write ( iunit , '(A)' ) 'end facet' end do write ( iunit , '(A)' ) 'endsolid ' // trim ( modelname ) ! close the file: close ( iunit ) end if end subroutine write_ascii_stl_file !******************************************************************************** !******************************************************************************** !> !  Compute the scale factor for the vertices (for writing to a file). pure function compute_vertex_scale ( me , bounding_box ) result ( scale ) implicit none class ( stl_file ), intent ( in ) :: me real ( wp ), intent ( in ), optional :: bounding_box !! scale vertices so that model fits in a !! box of this size (if <=0, no scaling is done) real ( wp ) :: scale !! scale factor real ( wp ) :: max_value !! largest absolute value of any vertex coordinate integer :: i !! counter scale = one if ( present ( bounding_box )) then if ( bounding_box > zero ) then max_value = - huge ( one ) do i = 1 , size ( me % plates ) max_value = max ( max_value , maxval ( abs ( me % plates ( i )% v1 )),& maxval ( abs ( me % plates ( i )% v2 )),& maxval ( abs ( me % plates ( i )% v3 )) ) end do scale = bounding_box / max_value end if end if end function compute_vertex_scale !******************************************************************************** !******************************************************************************** !> !  Shift the vertex coordinates so that there are no non-positive components. subroutine shift_mesh ( me ) implicit none class ( stl_file ), intent ( inout ) :: me integer :: i !! counter integer :: j !! counter real ( wp ), dimension ( 3 ) :: offset !! offset vector for vertext coordinates [x,y,z] real ( wp ), dimension ( 3 ) :: mins !! min values of vertex coordinates [x,y,z] real ( wp ), parameter :: tiny = 1.0e-4_wp !! small value to avoid zero ! first find the min value of each coordinate: mins = huge ( one ) do i = 1 , size ( me % plates ) do concurrent ( j = 1 : 3 ) mins ( j ) = min ( mins ( j ), & me % plates ( i )% v1 ( j ), & me % plates ( i )% v2 ( j ), & me % plates ( i )% v3 ( j ) ) end do end do ! compute the offset vector: offset = zero do concurrent ( j = 1 : 3 ) if ( mins ( j ) <= zero ) offset ( j ) = abs ( mins ( j )) + tiny end do if ( any ( offset /= zero )) then ! now add offset vector to each do i = 1 , size ( me % plates ) me % plates ( i )% v1 = me % plates ( i )% v1 + offset me % plates ( i )% v2 = me % plates ( i )% v2 + offset me % plates ( i )% v3 = me % plates ( i )% v3 + offset end do end if end subroutine shift_mesh !******************************************************************************** !******************************************************************************** !> !  Add a sphere to an STL file. subroutine add_sphere ( me , center , radius , num_lat_points , num_lon_points ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: center !! coordinates of sphere center [x,y,z] real ( wp ), intent ( in ) :: radius !! radius of the sphere integer , intent ( in ) :: num_lat_points !! number of latitude points (not counting poles) integer , intent ( in ) :: num_lon_points !! number of longitude points integer :: i !! counter integer :: j !! counter real ( wp ) :: delta_lat !! step in latitude (deg) real ( wp ) :: delta_lon !! step in longitude (deg) real ( wp ), dimension (:), allocatable :: lat !! array of latitude values (deg) real ( wp ), dimension (:), allocatable :: lon !! array of longitude value (deg) real ( wp ), dimension ( 3 ) :: v1 , v2 , v3 , v4 !! vertices ! Example: ! ! num_lat_points = 3 ! num_lon_points = 5 ! !  90 -------------  North pole !     |  *  *  *  | !     |  *  *  *  | !     |  *  *  *  | ! -90 -------------  South pole !     0          360 delta_lat = 18 0.0_wp / ( 1 + num_lat_points ) delta_lon = 36 0.0_wp / ( 1 + num_lon_points ) lat = - 9 0.0_wp + [( delta_lat * ( i - 1 ), i = 1 , num_lat_points + 2 )] lon = [( delta_lon * ( i - 1 ), i = 1 , num_lon_points + 2 )] ! generate all the plates on the sphere. ! start at bottom left and go right then up. ! each box is two triangular plates. do i = 1 , num_lat_points + 1 do j = 1 , num_lon_points + 1 !   3----2 !   |  / | !   | /  | ! i 1----4 !   j v1 = spherical_to_cartesian ( radius , lon ( j ), lat ( i ) ) + center v2 = spherical_to_cartesian ( radius , lon ( j + 1 ), lat ( i + 1 )) + center v3 = spherical_to_cartesian ( radius , lon ( j ), lat ( i + 1 )) + center v4 = spherical_to_cartesian ( radius , lon ( j + 1 ), lat ( i ) ) + center call me % add_plate ( v1 , v2 , v3 ) call me % add_plate ( v1 , v4 , v2 ) end do end do end subroutine add_sphere !******************************************************************************** !******************************************************************************** !> !  Add a cylinder to an STL file. ! !  The cylinder is specified by the initial and final x,y,z coordinates. Optionally, !  an initial and final normal vector can be specified (if not specified, !  then a default one is constructed). subroutine add_cylinder ( me , v1 , v2 , radius , num_points , initial_cap , final_cap ,& initial_normal , final_normal , final_normal_used , initial_vector , final_initial_vector_used ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! coordinates of initial point real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! coordinates of final point real ( wp ), intent ( in ) :: radius !! radius of the cylinder integer , intent ( in ) :: num_points !! number of point on the circle (>=3) logical , intent ( in ) :: initial_cap !! add a cap plate to the initial point logical , intent ( in ) :: final_cap !! add a cap plate to the final point real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_normal !! outward normal vector for initial circle real ( wp ), dimension ( 3 ), intent ( in ), optional :: final_normal !! outward normal vector for final circle real ( wp ), dimension ( 3 ), intent ( out ), optional :: final_normal_used !! outward normal vector for final circle actually used real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_vector !! vector to use to generate the initial circle (x_unit by default) real ( wp ), dimension ( 3 ), intent ( out ), optional :: final_initial_vector_used !! the initial vector used for the final cap to generate the points integer :: i !! counter integer :: nc !! number of points on the circle real ( wp ), dimension ( 3 ) :: n0 !! normal vector for initial circle real ( wp ), dimension ( 3 ) :: nf !! normal vector for final circle real ( wp ), dimension (:,:), allocatable :: n0_cap_points !! points for the initial cap real ( wp ), dimension (:,:), allocatable :: nf_cap_points !! points for the final cap nc = max ( 3 , num_points ) ! compute the end unit vectors ! !        1 _________2 !        |          | !  n0 <--*----------*--> nf !        |          | !         ---------- if ( present ( initial_normal )) then n0 = unit ( initial_normal ) else n0 = unit ( v1 - v2 ) end if if ( present ( final_normal )) then nf = unit ( final_normal ) else nf = unit ( v2 - v1 ) end if if ( present ( final_normal_used )) final_normal_used = nf ! return if necessary ! create the points on the initial cap (optionally add the plate) call me % generate_circle ( v1 , radius , n0 , nc , initial_cap , n0_cap_points , initial_vector = initial_vector ) ! create the points on the final cap (optionally add the plate) ! [use the same initial vector to sure that the plate will form a good cylinder] call me % generate_circle ( v2 , radius , nf , nc , final_cap , nf_cap_points ,& initial_vector = unit ( n0_cap_points (:, 1 ) - v1 ), cw = . true .) if ( present ( final_initial_vector_used )) final_initial_vector_used = unit ( nf_cap_points (:, 1 ) - v2 ) ! now connect the points to form the cylinder: !   1----2  nf !   |  / | !   | /  | !   1----2  n0 do i = 1 , nc - 1 call me % add_plate ( n0_cap_points (:, i ), n0_cap_points (:, i + 1 ), nf_cap_points (:, i + 1 )) call me % add_plate ( n0_cap_points (:, i ), nf_cap_points (:, i + 1 ), nf_cap_points (:, i )) end do ! last one: !   n----1  nf !   |  / | !   | /  | !   n----1  n0 call me % add_plate ( n0_cap_points (:, nc ), n0_cap_points (:, 1 ), nf_cap_points (:, 1 )) call me % add_plate ( n0_cap_points (:, nc ), nf_cap_points (:, 1 ), nf_cap_points (:, nc )) end subroutine add_cylinder !******************************************************************************** !******************************************************************************** !> !  Add a cone to an STL file. ! !  The cylinder is specified by the initial and final x,y,z coordinates. Optionally, !  an initial and final normal vector can be specified (if not specified, !  then a default one is constructed). subroutine add_cone ( me , v1 , v2 , radius , num_points , initial_cap , initial_normal ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! coordinates of initial point (bottom of the cone) real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! coordinates of final point (point of the cone) real ( wp ), intent ( in ) :: radius !! radius of the cone (the bottom plate) integer , intent ( in ) :: num_points !! number of point on the circle (>=3) logical , intent ( in ) :: initial_cap !! add a cap plate to the initial point (bottom) real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_normal !! outward normal vector for initial plate (bottom) integer :: i !! counter integer :: nc !! number of points on the circle real ( wp ), dimension ( 3 ) :: n0 !! normal vector for initial circle real ( wp ), dimension (:,:), allocatable :: n0_cap_points !! points for the initial cap nc = max ( 3 , num_points ) ! compute the end unit vector: if ( present ( initial_normal )) then n0 = unit ( initial_normal ) else n0 = unit ( v1 - v2 ) end if ! create the points on the initial cap (optionally add the plate) call me % generate_circle ( v1 , radius , n0 , nc , initial_cap , n0_cap_points ) ! draw the cone plates !      *     v2 !     / \\ !    /   \\ !   1--*--2  v1 do i = 1 , nc - 1 call me % add_plate ( n0_cap_points (:, i ), n0_cap_points (:, i + 1 ), v2 ) end do ! last one: call me % add_plate ( n0_cap_points (:, nc ), n0_cap_points (:, 1 ), v2 ) end subroutine add_cone !******************************************************************************** !******************************************************************************** !> !  Generate the points in a circle, and optionally add it as a plate. subroutine generate_circle ( me , c , radius , n , nc , add_circle , circle , initial_vector , cw ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: c !! center of the circle real ( wp ), intent ( in ) :: radius !! radius of the cylinder real ( wp ), dimension ( 3 ), intent ( in ) :: n !! normal vector to the circle integer , intent ( in ) :: nc !! number of points on the circle (must be at least 3) logical , intent ( in ) :: add_circle !! to also add to the circle as a plate real ( wp ), dimension (:,:), allocatable , intent ( out ) :: circle !! points on the circle real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_vector !! vector to use to generate the initial circle (x_unit by default) logical , intent ( in ), optional :: cw !! generate the points in the clockwise direction abound n (default is false) real ( wp ), dimension ( 3 ) :: v !! initial vector for the circle integer :: i !! counter real ( wp ) :: factor !! cw/ccw factor if ( nc < 3 ) error stop 'number of points on a circle must be at least 3' allocate ( circle ( 3 , nc )) ! circle = -999 factor = one if ( present ( cw )) then if ( cw ) factor = - one end if ! start with an initial vector on the circle (perpendicular to n0) ! [project x to circle (or y if x is parallel to n)] if ( present ( initial_vector )) then v = unit ( vector_projection_on_plane ( initial_vector , n )) if (. not . perpendicular ( v , n )) then ! fall back to x or y axis v = unit ( vector_projection_on_plane ( x_unit , n )) if (. not . perpendicular ( v , n )) then v = unit ( vector_projection_on_plane ( y_unit , n )) end if end if else v = unit ( vector_projection_on_plane ( x_unit , n )) if (. not . perpendicular ( v , n )) then v = unit ( vector_projection_on_plane ( y_unit , n )) end if end if v = radius * unit ( v ) ! generate the points by rotating the initial vector around the circle: circle (:, 1 ) = c + v do i = 2 , nc circle (:, i ) = c + axis_angle_rotation ( v , n ,( i - 1 ) * factor * ( 36 0.0_wp / nc )) if ( add_circle ) then ! draw the initial cap call me % add_plate ( c , circle (:, i ), circle (:, i - 1 )) end if end do ! final plate that connects last to first if ( add_circle ) call me % add_plate ( c , circle (:, 1 ), circle (:, nc )) end subroutine generate_circle !******************************************************************************** !******************************************************************************** !> !  Returns true if the two vectors are perpendicular. pure function perpendicular ( v1 , v2 ) result ( is_parallel ) implicit none real ( wp ), dimension (:), intent ( in ) :: v1 real ( wp ), dimension (:), intent ( in ) :: v2 logical :: is_parallel real ( wp ), parameter :: tol = 1 0.0_wp * epsilon ( 1.0_wp ) !! tolerance is_parallel = abs ( dot_product ( unit ( v1 ), unit ( v2 ))) <= tol end function perpendicular !******************************************************************************** !******************************************************************************** !> !  Add a curve to an STL file. ! !  A curve is a joined set of cylinders with no internal caps. subroutine add_curve ( me , x , y , z , radius , num_points ,& initial_cap , initial_normal , final_cap , final_normal , initial_vector ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! x coordinate array real ( wp ), dimension (:), intent ( in ) :: y !! y coordinate array real ( wp ), dimension (:), intent ( in ) :: z !! z coordinate array real ( wp ), intent ( in ) :: radius !! radius of the cylinder integer , intent ( in ) :: num_points !! number of point on the cylinder perimeter logical , intent ( in ), optional :: initial_cap !! add a cap plate to the initial point real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_normal !! outward normal vector for initial circle logical , intent ( in ), optional :: final_cap !! add a cap plate to the final point real ( wp ), dimension ( 3 ), intent ( in ), optional :: final_normal !! outward normal vector for final circle real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_vector !! vector to use to generate the first circle (x_unit by default) integer :: i !! counter integer :: n !! number of points real ( wp ), dimension ( 3 ) :: nv !! for intermediate normal vectors real ( wp ), dimension ( 3 ) :: nv_tmp !! for intermediate normal vectors real ( wp ), dimension ( 3 ) :: v !! for intermediate initial vectors n = min ( size ( x ), size ( y ), size ( z )) if ( n < 2 ) error stop 'error: a curve must have more than one point' ! first cylinder [no final cap unless only two points] call me % add_cylinder ([ x ( 1 ), y ( 1 ), z ( 1 )],& [ x ( 2 ), y ( 2 ), z ( 2 )],& radius , num_points ,& initial_cap = initial_cap , initial_normal = initial_normal , initial_vector = initial_vector ,& final_cap = n == 2 , final_normal_used = nv , final_initial_vector_used = v ) if ( n > 3 ) then ! intermediate cylinders (the initial normal is the final normal from the previous cylinder) do i = 2 , n - 2 call me % add_cylinder ([ x ( i ), y ( i ), z ( i )],& [ x ( i + 1 ), y ( i + 1 ), z ( i + 1 )],& radius , num_points ,& initial_cap = . false ., initial_normal =- nv ,& final_cap = . false ., final_normal_used = nv_tmp ,& initial_vector = v ) nv = unit ( nv_tmp ) end do end if ! last cylinder [no initial cap] if ( n >= 3 ) then call me % add_cylinder ([ x ( n - 1 ), y ( n - 1 ), z ( n - 1 )],& [ x ( n ), y ( n ), z ( n )],& radius , num_points ,& final_cap = final_cap , final_normal = final_normal ,& initial_normal =- nv , initial_cap = . false .,& initial_vector = v ) end if end subroutine add_curve !******************************************************************************** !******************************************************************************** !> !  Normal vector for the plate (computed using right hand rule). pure function normal ( v1 , v2 , v3 ) result ( n ) implicit none real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! first vertex of the triangle [x,y,z] real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! second vertex of the triangle [x,y,z] real ( wp ), dimension ( 3 ), intent ( in ) :: v3 !! third vertex of the triangle [x,y,z] real ( wp ), dimension ( 3 ) :: n !! surface normal vector n = unit ( cross ( v2 - v1 , v3 - v1 ) ) end function normal !******************************************************************************** !******************************************************************************** !> !  3x1 Unit vector. pure function unit ( r ) result ( rhat ) implicit none real ( wp ), dimension ( 3 ) :: rhat real ( wp ), dimension ( 3 ), intent ( in ) :: r real ( wp ) :: rmag rmag = norm2 ( r ) if ( rmag /= zero ) then rhat = r / rmag else rhat = zero end if end function unit !******************************************************************************** !******************************************************************************** !> !  Vector cross product. pure function cross ( a , b ) result ( axb ) implicit none real ( wp ), dimension ( 3 ) :: axb real ( wp ), dimension ( 3 ), intent ( in ) :: a real ( wp ), dimension ( 3 ), intent ( in ) :: b axb ( 1 ) = a ( 2 ) * b ( 3 ) - a ( 3 ) * b ( 2 ) axb ( 2 ) = a ( 3 ) * b ( 1 ) - a ( 1 ) * b ( 3 ) axb ( 3 ) = a ( 1 ) * b ( 2 ) - a ( 2 ) * b ( 1 ) end function cross !******************************************************************************** !******************************************************************************** !> !  Convert spherical (r,alpha,beta) to Cartesian (x,y,z). pure function spherical_to_cartesian ( r , alpha , beta ) result ( rvec ) implicit none real ( wp ), intent ( in ) :: r !! magnitude real ( wp ), intent ( in ) :: alpha !! right ascension [deg] real ( wp ), intent ( in ) :: beta !! declination [deg] real ( wp ), dimension ( 3 ) :: rvec !! [x,y,z] vector rvec ( 1 ) = r * cos ( alpha * deg2rad ) * cos ( beta * deg2rad ) rvec ( 2 ) = r * sin ( alpha * deg2rad ) * cos ( beta * deg2rad ) rvec ( 3 ) = r * sin ( beta * deg2rad ) end function spherical_to_cartesian !******************************************************************************** !******************************************************************************** !> author: Jacob Williams !  date: 7/20/2014 ! !  Rotate a 3x1 vector in space, given an axis and angle of rotation. ! !# Reference !   * [Wikipedia](http://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula) pure function axis_angle_rotation ( v , k , theta ) result ( vrot ) implicit none real ( wp ), dimension ( 3 ), intent ( in ) :: v !! vector to rotate real ( wp ), dimension ( 3 ), intent ( in ) :: k !! rotation axis real ( wp ), intent ( in ) :: theta !! rotation angle [deg] real ( wp ), dimension ( 3 ) :: vrot !! result real ( wp ), dimension ( 3 ) :: khat real ( wp ) :: ct , st ct = cos ( theta * deg2rad ) st = sin ( theta * deg2rad ) khat = unit ( k ) !rotation axis unit vector vrot = v * ct + cross ( khat , v ) * st + khat * dot_product ( khat , v ) * ( one - ct ) end function axis_angle_rotation !******************************************************************************** !******************************************************************************** !> !  The projection of one vector onto another vector. ! !### Reference !   * [Wikipedia](http://en.wikipedia.org/wiki/Gram-Schmidt_process) ! !### History !  * Jacob Williams : 7/21/2014 !  * JW : fixed a typo : 6/18/2021 pure function vector_projection ( a , b ) result ( c ) implicit none real ( wp ), dimension (:), intent ( in ) :: a !! the original vector real ( wp ), dimension ( size ( a )), intent ( in ) :: b !! the vector to project on to real ( wp ), dimension ( size ( a )) :: c !! the projection of a onto b real ( wp ) :: bmag2 bmag2 = dot_product ( b , b ) if ( bmag2 == zero ) then c = zero else c = b * dot_product ( a , b ) / bmag2 end if end function vector_projection !******************************************************************************** !******************************************************************************** !> !  Project a vector onto a plane. ! !### Reference !   * [Projection of a Vector onto a Plane](http://www.maplesoft.com/support/help/Maple/view.aspx?path=MathApps/ProjectionOfVectorOntoPlane) pure function vector_projection_on_plane ( a , b ) result ( c ) implicit none real ( wp ), dimension ( 3 ), intent ( in ) :: a !! the original vector real ( wp ), dimension ( 3 ), intent ( in ) :: b !! the plane to project on to (a normal vector) real ( wp ), dimension ( 3 ) :: c !! the projection of a onto the b plane c = a - vector_projection ( a , b ) end function vector_projection_on_plane !******************************************************************************** !******************************************************************************** end module stl_module !********************************************************************************","tags":"","loc":"sourcefile/stl_module.f90.html"},{"title":"plate – stl-fortran ","text":"type, private :: plate a 3D triangular plate.\n [note that the order of the vertices defines the\n surface normal via the right-hand rule] Inherited by type~~plate~~InheritedByGraph type~plate plate type~stl_file stl_file type~stl_file->type~plate plates Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Contents Variables v1 v2 v3 Source Code plate Components Type Visibility Attributes Name Initial real(kind=wp), public, dimension(3) :: v1 = zero first vertex real(kind=wp), public, dimension(3) :: v2 = zero second vertex real(kind=wp), public, dimension(3) :: v3 = zero third vertex Source Code type :: plate !! a 3D triangular plate. !! [note that the order of the vertices defines the !! surface normal via the right-hand rule] real ( wp ), dimension ( 3 ) :: v1 = zero !! first vertex real ( wp ), dimension ( 3 ) :: v2 = zero !! second vertex real ( wp ), dimension ( 3 ) :: v3 = zero !! third vertex end type plate","tags":"","loc":"type/plate.html"},{"title":"stl_file – stl-fortran ","text":"type, public :: stl_file the main class for STL file I/O. Inherits type~~stl_file~~InheritsGraph type~stl_file stl_file type~plate plate type~stl_file->type~plate plates Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Contents Variables n_plates chunk_size plates Type-Bound Procedures write_ascii_stl_file write_binary_stl_file add_plate add_sphere add_cylinder add_curve add_cone generate_circle shift_mesh set_chunk_size destroy compute_vertex_scale Source Code stl_file Components Type Visibility Attributes Name Initial integer, private :: n_plates = 0 number of plates integer, private :: chunk_size = 1000 expand plates array in chunks of this size type( plate ), private, dimension(:), allocatable :: plates the array of plates Type-Bound Procedures procedure, public :: write_ascii_stl_file private subroutine write_ascii_stl_file (me, filename, modelname, istat, bounding_box) Generate an ascii STL file. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me character(len=*), intent(in) :: filename STL file name character(len=*), intent(in) :: modelname the solid name (should not contain spaces) integer, intent(out) :: istat iostat code real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) procedure, public :: write_binary_stl_file private subroutine write_binary_stl_file (me, filename, istat, bounding_box) Generate a binary STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me character(len=*), intent(in) :: filename STL file name integer, intent(out) :: istat iostat code real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) procedure, public :: add_plate private subroutine add_plate (me, v1, v2, v3) Add a plate to the class. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 first vertex real(kind=wp), intent(in), dimension(3) :: v2 second vertex real(kind=wp), intent(in), dimension(3) :: v3 third vertex procedure, public :: add_sphere private subroutine add_sphere (me, center, radius, num_lat_points, num_lon_points) Add a sphere to an STL file. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: center coordinates of sphere center [x,y,z] real(kind=wp), intent(in) :: radius radius of the sphere integer, intent(in) :: num_lat_points number of latitude points (not counting poles) integer, intent(in) :: num_lon_points number of longitude points procedure, public :: add_cylinder private subroutine add_cylinder (me, v1, v2, radius, num_points, initial_cap, final_cap, initial_normal, final_normal, final_normal_used, initial_vector, final_initial_vector_used) Add a cylinder to an STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 coordinates of initial point real(kind=wp), intent(in), dimension(3) :: v2 coordinates of final point real(kind=wp), intent(in) :: radius radius of the cylinder integer, intent(in) :: num_points number of point on the circle (>=3) logical, intent(in) :: initial_cap add a cap plate to the initial point logical, intent(in) :: final_cap add a cap plate to the final point real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial circle real(kind=wp), intent(in), optional dimension(3) :: final_normal outward normal vector for final circle real(kind=wp), intent(out), optional dimension(3) :: final_normal_used outward normal vector for final circle actually used real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the initial circle (x_unit by default) real(kind=wp), intent(out), optional dimension(3) :: final_initial_vector_used the initial vector used for the final cap to generate the points procedure, public :: add_curve private subroutine add_curve (me, x, y, z, radius, num_points, initial_cap, initial_normal, final_cap, final_normal, initial_vector) Add a curve to an STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x x coordinate array real(kind=wp), intent(in), dimension(:) :: y y coordinate array real(kind=wp), intent(in), dimension(:) :: z z coordinate array real(kind=wp), intent(in) :: radius radius of the cylinder integer, intent(in) :: num_points number of point on the cylinder perimeter logical, intent(in), optional :: initial_cap add a cap plate to the initial point real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial circle logical, intent(in), optional :: final_cap add a cap plate to the final point real(kind=wp), intent(in), optional dimension(3) :: final_normal outward normal vector for final circle real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the first circle (x_unit by default) procedure, public :: add_cone private subroutine add_cone (me, v1, v2, radius, num_points, initial_cap, initial_normal) Add a cone to an STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 coordinates of initial point (bottom of the cone) real(kind=wp), intent(in), dimension(3) :: v2 coordinates of final point (point of the cone) real(kind=wp), intent(in) :: radius radius of the cone (the bottom plate) integer, intent(in) :: num_points number of point on the circle (>=3) logical, intent(in) :: initial_cap add a cap plate to the initial point (bottom) real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial plate (bottom) procedure, public :: generate_circle private subroutine generate_circle (me, c, radius, n, nc, add_circle, circle, initial_vector, cw) Generate the points in a circle, and optionally add it as a plate. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: c center of the circle real(kind=wp), intent(in) :: radius radius of the cylinder real(kind=wp), intent(in), dimension(3) :: n normal vector to the circle integer, intent(in) :: nc number of points on the circle (must be at least 3) logical, intent(in) :: add_circle to also add to the circle as a plate real(kind=wp), intent(out), dimension(:,:), allocatable :: circle points on the circle real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the initial circle (x_unit by default) logical, intent(in), optional :: cw generate the points in the clockwise direction abound n (default is false) procedure, public :: shift_mesh private subroutine shift_mesh (me) Shift the vertex coordinates so that there are no non-positive components. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me procedure, public :: set_chunk_size private subroutine set_chunk_size (me, chunk_size) Set the chunk size in the class. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me integer, intent(in) :: chunk_size must be >0 procedure, public :: destroy => destroy_stl_file private subroutine destroy_stl_file (me) Destroy an stl_file . Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me procedure, private :: compute_vertex_scale private pure function compute_vertex_scale (me, bounding_box) result(scale) Compute the scale factor for the vertices (for writing to a file). Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) Return Value real(kind=wp) scale factor Source Code type , public :: stl_file !! the main class for STL file I/O. private integer :: n_plates = 0 !! number of plates integer :: chunk_size = 1000 !! expand `plates` array in chunks of this size type ( plate ), dimension (:), allocatable :: plates !! the array of plates contains private procedure , public :: write_ascii_stl_file procedure , public :: write_binary_stl_file procedure , public :: add_plate procedure , public :: add_sphere procedure , public :: add_cylinder procedure , public :: add_curve procedure , public :: add_cone procedure , public :: generate_circle procedure , public :: shift_mesh procedure , public :: set_chunk_size procedure , public :: destroy => destroy_stl_file procedure :: compute_vertex_scale end type stl_file","tags":"","loc":"type/stl_file.html"},{"title":"compute_vertex_scale – stl-fortran","text":"private pure function compute_vertex_scale(me, bounding_box) result(scale) Compute the scale factor for the vertices (for writing to a file). Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) Return Value real(kind=wp) scale factor Contents Source Code compute_vertex_scale Source Code pure function compute_vertex_scale ( me , bounding_box ) result ( scale ) implicit none class ( stl_file ), intent ( in ) :: me real ( wp ), intent ( in ), optional :: bounding_box !! scale vertices so that model fits in a !! box of this size (if <=0, no scaling is done) real ( wp ) :: scale !! scale factor real ( wp ) :: max_value !! largest absolute value of any vertex coordinate integer :: i !! counter scale = one if ( present ( bounding_box )) then if ( bounding_box > zero ) then max_value = - huge ( one ) do i = 1 , size ( me % plates ) max_value = max ( max_value , maxval ( abs ( me % plates ( i )% v1 )),& maxval ( abs ( me % plates ( i )% v2 )),& maxval ( abs ( me % plates ( i )% v3 )) ) end do scale = bounding_box / max_value end if end if end function compute_vertex_scale","tags":"","loc":"proc/compute_vertex_scale.html"},{"title":"perpendicular – stl-fortran","text":"private pure function perpendicular(v1, v2) result(is_parallel) Returns true if the two vectors are perpendicular. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: v1 real(kind=wp), intent(in), dimension(:) :: v2 Return Value logical Calls proc~~perpendicular~~CallsGraph proc~perpendicular perpendicular proc~unit unit proc~perpendicular->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~perpendicular~~CalledByGraph proc~perpendicular perpendicular proc~generate_circle generate_circle proc~generate_circle->proc~perpendicular Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code perpendicular Source Code pure function perpendicular ( v1 , v2 ) result ( is_parallel ) implicit none real ( wp ), dimension (:), intent ( in ) :: v1 real ( wp ), dimension (:), intent ( in ) :: v2 logical :: is_parallel real ( wp ), parameter :: tol = 1 0.0_wp * epsilon ( 1.0_wp ) !! tolerance is_parallel = abs ( dot_product ( unit ( v1 ), unit ( v2 ))) <= tol end function perpendicular","tags":"","loc":"proc/perpendicular.html"},{"title":"normal – stl-fortran","text":"private pure function normal(v1, v2, v3) result(n) Normal vector for the plate (computed using right hand rule). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: v1 first vertex of the triangle [x,y,z] real(kind=wp), intent(in), dimension(3) :: v2 second vertex of the triangle [x,y,z] real(kind=wp), intent(in), dimension(3) :: v3 third vertex of the triangle [x,y,z] Return Value real(kind=wp),\n  dimension(3) surface normal vector Calls proc~~normal~~CallsGraph proc~normal normal proc~cross cross proc~normal->proc~cross proc~unit unit proc~normal->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~normal~~CalledByGraph proc~normal normal proc~write_binary_stl_file write_binary_stl_file proc~write_binary_stl_file->proc~normal proc~write_ascii_stl_file write_ascii_stl_file proc~write_ascii_stl_file->proc~normal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code normal Source Code pure function normal ( v1 , v2 , v3 ) result ( n ) implicit none real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! first vertex of the triangle [x,y,z] real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! second vertex of the triangle [x,y,z] real ( wp ), dimension ( 3 ), intent ( in ) :: v3 !! third vertex of the triangle [x,y,z] real ( wp ), dimension ( 3 ) :: n !! surface normal vector n = unit ( cross ( v2 - v1 , v3 - v1 ) ) end function normal","tags":"","loc":"proc/normal.html"},{"title":"unit – stl-fortran","text":"private pure function unit(r) result(rhat) 3x1 Unit vector. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: r Return Value real(kind=wp),\n  dimension(3) Called by proc~~unit~~CalledByGraph proc~unit unit proc~axis_angle_rotation axis_angle_rotation proc~axis_angle_rotation->proc~unit proc~add_cone add_cone proc~add_cone->proc~unit proc~perpendicular perpendicular proc~perpendicular->proc~unit proc~normal normal proc~normal->proc~unit proc~generate_circle generate_circle proc~generate_circle->proc~unit proc~generate_circle->proc~axis_angle_rotation proc~generate_circle->proc~perpendicular proc~add_cylinder add_cylinder proc~add_cylinder->proc~unit proc~add_curve add_curve proc~add_curve->proc~unit proc~write_binary_stl_file write_binary_stl_file proc~write_binary_stl_file->proc~normal proc~write_ascii_stl_file write_ascii_stl_file proc~write_ascii_stl_file->proc~normal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code unit Source Code pure function unit ( r ) result ( rhat ) implicit none real ( wp ), dimension ( 3 ) :: rhat real ( wp ), dimension ( 3 ), intent ( in ) :: r real ( wp ) :: rmag rmag = norm2 ( r ) if ( rmag /= zero ) then rhat = r / rmag else rhat = zero end if end function unit","tags":"","loc":"proc/unit.html"},{"title":"cross – stl-fortran","text":"private pure function cross(a, b) result(axb) Vector cross product. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: a real(kind=wp), intent(in), dimension(3) :: b Return Value real(kind=wp),\n  dimension(3) Called by proc~~cross~~CalledByGraph proc~cross cross proc~normal normal proc~normal->proc~cross proc~axis_angle_rotation axis_angle_rotation proc~axis_angle_rotation->proc~cross proc~write_binary_stl_file write_binary_stl_file proc~write_binary_stl_file->proc~normal proc~write_ascii_stl_file write_ascii_stl_file proc~write_ascii_stl_file->proc~normal proc~generate_circle generate_circle proc~generate_circle->proc~axis_angle_rotation Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code cross Source Code pure function cross ( a , b ) result ( axb ) implicit none real ( wp ), dimension ( 3 ) :: axb real ( wp ), dimension ( 3 ), intent ( in ) :: a real ( wp ), dimension ( 3 ), intent ( in ) :: b axb ( 1 ) = a ( 2 ) * b ( 3 ) - a ( 3 ) * b ( 2 ) axb ( 2 ) = a ( 3 ) * b ( 1 ) - a ( 1 ) * b ( 3 ) axb ( 3 ) = a ( 1 ) * b ( 2 ) - a ( 2 ) * b ( 1 ) end function cross","tags":"","loc":"proc/cross.html"},{"title":"spherical_to_cartesian – stl-fortran","text":"private pure function spherical_to_cartesian(r, alpha, beta) result(rvec) Convert spherical (r,alpha,beta) to Cartesian (x,y,z). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: r magnitude real(kind=wp), intent(in) :: alpha right ascension [deg] real(kind=wp), intent(in) :: beta declination [deg] Return Value real(kind=wp),\n  dimension(3) [x,y,z] vector Called by proc~~spherical_to_cartesian~~CalledByGraph proc~spherical_to_cartesian spherical_to_cartesian proc~add_sphere add_sphere proc~add_sphere->proc~spherical_to_cartesian Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code spherical_to_cartesian Source Code pure function spherical_to_cartesian ( r , alpha , beta ) result ( rvec ) implicit none real ( wp ), intent ( in ) :: r !! magnitude real ( wp ), intent ( in ) :: alpha !! right ascension [deg] real ( wp ), intent ( in ) :: beta !! declination [deg] real ( wp ), dimension ( 3 ) :: rvec !! [x,y,z] vector rvec ( 1 ) = r * cos ( alpha * deg2rad ) * cos ( beta * deg2rad ) rvec ( 2 ) = r * sin ( alpha * deg2rad ) * cos ( beta * deg2rad ) rvec ( 3 ) = r * sin ( beta * deg2rad ) end function spherical_to_cartesian","tags":"","loc":"proc/spherical_to_cartesian.html"},{"title":"axis_angle_rotation – stl-fortran","text":"private pure function axis_angle_rotation(v, k, theta) result(vrot) Rotate a 3x1 vector in space, given an axis and angle of rotation. Reference Wikipedia Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: v vector to rotate real(kind=wp), intent(in), dimension(3) :: k rotation axis real(kind=wp), intent(in) :: theta rotation angle [deg] Return Value real(kind=wp),\n  dimension(3) result Calls proc~~axis_angle_rotation~~CallsGraph proc~axis_angle_rotation axis_angle_rotation proc~cross cross proc~axis_angle_rotation->proc~cross proc~unit unit proc~axis_angle_rotation->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~axis_angle_rotation~~CalledByGraph proc~axis_angle_rotation axis_angle_rotation proc~generate_circle generate_circle proc~generate_circle->proc~axis_angle_rotation Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code axis_angle_rotation Source Code pure function axis_angle_rotation ( v , k , theta ) result ( vrot ) implicit none real ( wp ), dimension ( 3 ), intent ( in ) :: v !! vector to rotate real ( wp ), dimension ( 3 ), intent ( in ) :: k !! rotation axis real ( wp ), intent ( in ) :: theta !! rotation angle [deg] real ( wp ), dimension ( 3 ) :: vrot !! result real ( wp ), dimension ( 3 ) :: khat real ( wp ) :: ct , st ct = cos ( theta * deg2rad ) st = sin ( theta * deg2rad ) khat = unit ( k ) !rotation axis unit vector vrot = v * ct + cross ( khat , v ) * st + khat * dot_product ( khat , v ) * ( one - ct ) end function axis_angle_rotation","tags":"","loc":"proc/axis_angle_rotation.html"},{"title":"vector_projection – stl-fortran","text":"private pure function vector_projection(a, b) result(c) The projection of one vector onto another vector. Reference Wikipedia History Jacob Williams : 7/21/2014 JW : fixed a typo : 6/18/2021 Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: a the original vector real(kind=wp), intent(in), dimension(size(a)) :: b the vector to project on to Return Value real(kind=wp),\n  dimension(size(a)) the projection of a onto b Called by proc~~vector_projection~~CalledByGraph proc~vector_projection vector_projection proc~vector_projection_on_plane vector_projection_on_plane proc~vector_projection_on_plane->proc~vector_projection proc~generate_circle generate_circle proc~generate_circle->proc~vector_projection_on_plane Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code vector_projection Source Code pure function vector_projection ( a , b ) result ( c ) implicit none real ( wp ), dimension (:), intent ( in ) :: a !! the original vector real ( wp ), dimension ( size ( a )), intent ( in ) :: b !! the vector to project on to real ( wp ), dimension ( size ( a )) :: c !! the projection of a onto b real ( wp ) :: bmag2 bmag2 = dot_product ( b , b ) if ( bmag2 == zero ) then c = zero else c = b * dot_product ( a , b ) / bmag2 end if end function vector_projection","tags":"","loc":"proc/vector_projection.html"},{"title":"vector_projection_on_plane – stl-fortran","text":"private pure function vector_projection_on_plane(a, b) result(c) Project a vector onto a plane. Reference Projection of a Vector onto a Plane Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: a the original vector real(kind=wp), intent(in), dimension(3) :: b the plane to project on to (a normal vector) Return Value real(kind=wp),\n  dimension(3) the projection of a onto the b plane Calls proc~~vector_projection_on_plane~~CallsGraph proc~vector_projection_on_plane vector_projection_on_plane proc~vector_projection vector_projection proc~vector_projection_on_plane->proc~vector_projection Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~vector_projection_on_plane~~CalledByGraph proc~vector_projection_on_plane vector_projection_on_plane proc~generate_circle generate_circle proc~generate_circle->proc~vector_projection_on_plane Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code vector_projection_on_plane Source Code pure function vector_projection_on_plane ( a , b ) result ( c ) implicit none real ( wp ), dimension ( 3 ), intent ( in ) :: a !! the original vector real ( wp ), dimension ( 3 ), intent ( in ) :: b !! the plane to project on to (a normal vector) real ( wp ), dimension ( 3 ) :: c !! the projection of a onto the b plane c = a - vector_projection ( a , b ) end function vector_projection_on_plane","tags":"","loc":"proc/vector_projection_on_plane.html"},{"title":"destroy_stl_file – stl-fortran","text":"private subroutine destroy_stl_file(me) Destroy an stl_file . Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me Contents Source Code destroy_stl_file Source Code subroutine destroy_stl_file ( me ) implicit none class ( stl_file ), intent ( inout ) :: me if ( allocated ( me % plates )) deallocate ( me % plates ) me % n_plates = 0 end subroutine destroy_stl_file","tags":"","loc":"proc/destroy_stl_file.html"},{"title":"set_chunk_size – stl-fortran","text":"private subroutine set_chunk_size(me, chunk_size) Set the chunk size in the class. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me integer, intent(in) :: chunk_size must be >0 Contents Source Code set_chunk_size Source Code subroutine set_chunk_size ( me , chunk_size ) class ( stl_file ), intent ( inout ) :: me integer , intent ( in ) :: chunk_size !! must be >0 me % chunk_size = max ( 1 , chunk_size ) end subroutine set_chunk_size","tags":"","loc":"proc/set_chunk_size.html"},{"title":"add_plate – stl-fortran","text":"private subroutine add_plate(me, v1, v2, v3) Add a plate to the class. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 first vertex real(kind=wp), intent(in), dimension(3) :: v2 second vertex real(kind=wp), intent(in), dimension(3) :: v3 third vertex Contents Source Code add_plate Source Code subroutine add_plate ( me , v1 , v2 , v3 ) class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! first vertex real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! second vertex real ( wp ), dimension ( 3 ), intent ( in ) :: v3 !! third vertex integer :: n !! actual size of `plates` array in the class type ( plate ), dimension (:), allocatable :: tmp !! for resizing the `plates` array if ( allocated ( me % plates )) then n = size ( me % plates ) if ( me % n_plates == n ) then ! have to add another chunk allocate ( tmp ( n + me % chunk_size )) tmp ( 1 : n ) = me % plates tmp ( n + 1 )% v1 = v1 tmp ( n + 1 )% v2 = v2 tmp ( n + 1 )% v3 = v3 call move_alloc ( tmp , me % plates ) me % n_plates = me % n_plates + 1 return else ! add to next element in the class me % n_plates = me % n_plates + 1 end if else allocate ( me % plates ( me % chunk_size )) me % n_plates = 1 end if me % plates ( me % n_plates )% v1 = v1 me % plates ( me % n_plates )% v2 = v2 me % plates ( me % n_plates )% v3 = v3 end subroutine add_plate","tags":"","loc":"proc/add_plate.html"},{"title":"write_binary_stl_file – stl-fortran","text":"private subroutine write_binary_stl_file(me, filename, istat, bounding_box) Generate a binary STL file. Notes The file format is: UINT8 [ 80 ] – Header UINT32 – Number of triangles foreach triangle REAL32 [ 3 ] – Normal vector REAL32 [ 3 ] – Vertex 1 REAL32 [ 3 ] – Vertex 2 REAL32 [ 3 ] – Vertex 3 UINT16 – Attribute byte count end Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me character(len=*), intent(in) :: filename STL file name integer, intent(out) :: istat iostat code real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) Calls proc~~write_binary_stl_file~~CallsGraph proc~write_binary_stl_file write_binary_stl_file proc~normal normal proc~write_binary_stl_file->proc~normal proc~cross cross proc~normal->proc~cross proc~unit unit proc~normal->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code write_binary_stl_file Source Code subroutine write_binary_stl_file ( me , filename , istat , bounding_box ) implicit none class ( stl_file ), intent ( in ) :: me character ( len =* ), intent ( in ) :: filename !! STL file name integer , intent ( out ) :: istat !! `iostat` code real ( wp ), intent ( in ), optional :: bounding_box !! scale vertices so that model fits in a !! box of this size (if <=0, no scaling is done) integer :: iunit !! file unit number integer :: i !! counter integer ( c_int32_t ) :: n_plates !! number of plates [32 bits] real ( c_float ), dimension ( 3 ) :: n !! normal vector [32 bits] real ( c_float ), dimension ( 3 ) :: v1 , v2 , v3 !! vertex vectors [32 bits] real ( wp ) :: scale !! scale factor integer ( c_int16_t ), parameter :: z = 0 !! Attribute byte count [16 bits] character ( kind = c_char , len = 80 ), parameter :: header = repeat ( ' ' , 80 ) !! [8 bits x 80] n_plates = int ( me % n_plates , kind = c_int32_t ) scale = me % compute_vertex_scale ( bounding_box ) ! open the binary file: open ( newunit = iunit ,& file = filename ,& action = 'WRITE' ,& status = 'REPLACE' ,& form = 'UNFORMATTED' , & access = 'STREAM' , & iostat = istat ) if ( istat == 0 ) then ! write the file: write ( iunit ) header , n_plates do i = 1 , me % n_plates n = real ( normal ( me % plates ( i )% v1 , me % plates ( i )% v2 , me % plates ( i )% v3 ), c_float ) v1 = real ( me % plates ( i )% v1 * scale , c_float ) v2 = real ( me % plates ( i )% v2 * scale , c_float ) v3 = real ( me % plates ( i )% v3 * scale , c_float ) write ( iunit ) n , v1 , v2 , v3 , z end do ! close the file: close ( iunit ) end if end subroutine write_binary_stl_file","tags":"","loc":"proc/write_binary_stl_file.html"},{"title":"write_ascii_stl_file – stl-fortran","text":"private subroutine write_ascii_stl_file(me, filename, modelname, istat, bounding_box) Generate an ascii STL file. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me character(len=*), intent(in) :: filename STL file name character(len=*), intent(in) :: modelname the solid name (should not contain spaces) integer, intent(out) :: istat iostat code real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) Calls proc~~write_ascii_stl_file~~CallsGraph proc~write_ascii_stl_file write_ascii_stl_file proc~normal normal proc~write_ascii_stl_file->proc~normal proc~cross cross proc~normal->proc~cross proc~unit unit proc~normal->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code write_ascii_stl_file Source Code subroutine write_ascii_stl_file ( me , filename , modelname , istat , bounding_box ) implicit none class ( stl_file ), intent ( in ) :: me character ( len =* ), intent ( in ) :: filename !! STL file name character ( len =* ), intent ( in ) :: modelname !! the solid name (should not contain spaces) integer , intent ( out ) :: istat !! `iostat` code real ( wp ), intent ( in ), optional :: bounding_box !! scale vertices so that model fits in a !! box of this size (if <=0, no scaling is done) integer :: iunit !! file unit number integer :: i !! counter real ( wp ) :: scale !! scale factor character ( len =* ), parameter :: fmt = '(A,1X,E30.16,1X,E30.16,1X,E30.16)' !! format statement for vectors scale = me % compute_vertex_scale ( bounding_box ) ! open the text file: open ( newunit = iunit , file = trim ( filename ), status = 'REPLACE' , iostat = istat ) if ( istat == 0 ) then ! write the file: write ( iunit , '(A)' ) 'solid ' // trim ( modelname ) do i = 1 , me % n_plates write ( iunit , fmt ) 'facet normal' , normal ( me % plates ( i )% v1 , me % plates ( i )% v2 , me % plates ( i )% v3 ) write ( iunit , '(A)' ) '    outer loop' write ( iunit , fmt ) '        vertex' , me % plates ( i )% v1 * scale write ( iunit , fmt ) '        vertex' , me % plates ( i )% v2 * scale write ( iunit , fmt ) '        vertex' , me % plates ( i )% v3 * scale write ( iunit , '(A)' ) '    end loop' write ( iunit , '(A)' ) 'end facet' end do write ( iunit , '(A)' ) 'endsolid ' // trim ( modelname ) ! close the file: close ( iunit ) end if end subroutine write_ascii_stl_file","tags":"","loc":"proc/write_ascii_stl_file.html"},{"title":"shift_mesh – stl-fortran","text":"private subroutine shift_mesh(me) Shift the vertex coordinates so that there are no non-positive components. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me Contents Source Code shift_mesh Source Code subroutine shift_mesh ( me ) implicit none class ( stl_file ), intent ( inout ) :: me integer :: i !! counter integer :: j !! counter real ( wp ), dimension ( 3 ) :: offset !! offset vector for vertext coordinates [x,y,z] real ( wp ), dimension ( 3 ) :: mins !! min values of vertex coordinates [x,y,z] real ( wp ), parameter :: tiny = 1.0e-4_wp !! small value to avoid zero ! first find the min value of each coordinate: mins = huge ( one ) do i = 1 , size ( me % plates ) do concurrent ( j = 1 : 3 ) mins ( j ) = min ( mins ( j ), & me % plates ( i )% v1 ( j ), & me % plates ( i )% v2 ( j ), & me % plates ( i )% v3 ( j ) ) end do end do ! compute the offset vector: offset = zero do concurrent ( j = 1 : 3 ) if ( mins ( j ) <= zero ) offset ( j ) = abs ( mins ( j )) + tiny end do if ( any ( offset /= zero )) then ! now add offset vector to each do i = 1 , size ( me % plates ) me % plates ( i )% v1 = me % plates ( i )% v1 + offset me % plates ( i )% v2 = me % plates ( i )% v2 + offset me % plates ( i )% v3 = me % plates ( i )% v3 + offset end do end if end subroutine shift_mesh","tags":"","loc":"proc/shift_mesh.html"},{"title":"add_sphere – stl-fortran","text":"private subroutine add_sphere(me, center, radius, num_lat_points, num_lon_points) Add a sphere to an STL file. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: center coordinates of sphere center [x,y,z] real(kind=wp), intent(in) :: radius radius of the sphere integer, intent(in) :: num_lat_points number of latitude points (not counting poles) integer, intent(in) :: num_lon_points number of longitude points Calls proc~~add_sphere~~CallsGraph proc~add_sphere add_sphere proc~spherical_to_cartesian spherical_to_cartesian proc~add_sphere->proc~spherical_to_cartesian Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code add_sphere Source Code subroutine add_sphere ( me , center , radius , num_lat_points , num_lon_points ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: center !! coordinates of sphere center [x,y,z] real ( wp ), intent ( in ) :: radius !! radius of the sphere integer , intent ( in ) :: num_lat_points !! number of latitude points (not counting poles) integer , intent ( in ) :: num_lon_points !! number of longitude points integer :: i !! counter integer :: j !! counter real ( wp ) :: delta_lat !! step in latitude (deg) real ( wp ) :: delta_lon !! step in longitude (deg) real ( wp ), dimension (:), allocatable :: lat !! array of latitude values (deg) real ( wp ), dimension (:), allocatable :: lon !! array of longitude value (deg) real ( wp ), dimension ( 3 ) :: v1 , v2 , v3 , v4 !! vertices ! Example: ! ! num_lat_points = 3 ! num_lon_points = 5 ! !  90 -------------  North pole !     |  *  *  *  | !     |  *  *  *  | !     |  *  *  *  | ! -90 -------------  South pole !     0          360 delta_lat = 18 0.0_wp / ( 1 + num_lat_points ) delta_lon = 36 0.0_wp / ( 1 + num_lon_points ) lat = - 9 0.0_wp + [( delta_lat * ( i - 1 ), i = 1 , num_lat_points + 2 )] lon = [( delta_lon * ( i - 1 ), i = 1 , num_lon_points + 2 )] ! generate all the plates on the sphere. ! start at bottom left and go right then up. ! each box is two triangular plates. do i = 1 , num_lat_points + 1 do j = 1 , num_lon_points + 1 !   3----2 !   |  / | !   | /  | ! i 1----4 !   j v1 = spherical_to_cartesian ( radius , lon ( j ), lat ( i ) ) + center v2 = spherical_to_cartesian ( radius , lon ( j + 1 ), lat ( i + 1 )) + center v3 = spherical_to_cartesian ( radius , lon ( j ), lat ( i + 1 )) + center v4 = spherical_to_cartesian ( radius , lon ( j + 1 ), lat ( i ) ) + center call me % add_plate ( v1 , v2 , v3 ) call me % add_plate ( v1 , v4 , v2 ) end do end do end subroutine add_sphere","tags":"","loc":"proc/add_sphere.html"},{"title":"add_cylinder – stl-fortran","text":"private subroutine add_cylinder(me, v1, v2, radius, num_points, initial_cap, final_cap, initial_normal, final_normal, final_normal_used, initial_vector, final_initial_vector_used) Add a cylinder to an STL file. The cylinder is specified by the initial and final x,y,z coordinates. Optionally,\n  an initial and final normal vector can be specified (if not specified,\n  then a default one is constructed). Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 coordinates of initial point real(kind=wp), intent(in), dimension(3) :: v2 coordinates of final point real(kind=wp), intent(in) :: radius radius of the cylinder integer, intent(in) :: num_points number of point on the circle (>=3) logical, intent(in) :: initial_cap add a cap plate to the initial point logical, intent(in) :: final_cap add a cap plate to the final point real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial circle real(kind=wp), intent(in), optional dimension(3) :: final_normal outward normal vector for final circle real(kind=wp), intent(out), optional dimension(3) :: final_normal_used outward normal vector for final circle actually used real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the initial circle (x_unit by default) real(kind=wp), intent(out), optional dimension(3) :: final_initial_vector_used the initial vector used for the final cap to generate the points Calls proc~~add_cylinder~~CallsGraph proc~add_cylinder add_cylinder proc~unit unit proc~add_cylinder->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code add_cylinder Source Code subroutine add_cylinder ( me , v1 , v2 , radius , num_points , initial_cap , final_cap ,& initial_normal , final_normal , final_normal_used , initial_vector , final_initial_vector_used ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! coordinates of initial point real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! coordinates of final point real ( wp ), intent ( in ) :: radius !! radius of the cylinder integer , intent ( in ) :: num_points !! number of point on the circle (>=3) logical , intent ( in ) :: initial_cap !! add a cap plate to the initial point logical , intent ( in ) :: final_cap !! add a cap plate to the final point real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_normal !! outward normal vector for initial circle real ( wp ), dimension ( 3 ), intent ( in ), optional :: final_normal !! outward normal vector for final circle real ( wp ), dimension ( 3 ), intent ( out ), optional :: final_normal_used !! outward normal vector for final circle actually used real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_vector !! vector to use to generate the initial circle (x_unit by default) real ( wp ), dimension ( 3 ), intent ( out ), optional :: final_initial_vector_used !! the initial vector used for the final cap to generate the points integer :: i !! counter integer :: nc !! number of points on the circle real ( wp ), dimension ( 3 ) :: n0 !! normal vector for initial circle real ( wp ), dimension ( 3 ) :: nf !! normal vector for final circle real ( wp ), dimension (:,:), allocatable :: n0_cap_points !! points for the initial cap real ( wp ), dimension (:,:), allocatable :: nf_cap_points !! points for the final cap nc = max ( 3 , num_points ) ! compute the end unit vectors ! !        1 _________2 !        |          | !  n0 <--*----------*--> nf !        |          | !         ---------- if ( present ( initial_normal )) then n0 = unit ( initial_normal ) else n0 = unit ( v1 - v2 ) end if if ( present ( final_normal )) then nf = unit ( final_normal ) else nf = unit ( v2 - v1 ) end if if ( present ( final_normal_used )) final_normal_used = nf ! return if necessary ! create the points on the initial cap (optionally add the plate) call me % generate_circle ( v1 , radius , n0 , nc , initial_cap , n0_cap_points , initial_vector = initial_vector ) ! create the points on the final cap (optionally add the plate) ! [use the same initial vector to sure that the plate will form a good cylinder] call me % generate_circle ( v2 , radius , nf , nc , final_cap , nf_cap_points ,& initial_vector = unit ( n0_cap_points (:, 1 ) - v1 ), cw = . true .) if ( present ( final_initial_vector_used )) final_initial_vector_used = unit ( nf_cap_points (:, 1 ) - v2 ) ! now connect the points to form the cylinder: !   1----2  nf !   |  / | !   | /  | !   1----2  n0 do i = 1 , nc - 1 call me % add_plate ( n0_cap_points (:, i ), n0_cap_points (:, i + 1 ), nf_cap_points (:, i + 1 )) call me % add_plate ( n0_cap_points (:, i ), nf_cap_points (:, i + 1 ), nf_cap_points (:, i )) end do ! last one: !   n----1  nf !   |  / | !   | /  | !   n----1  n0 call me % add_plate ( n0_cap_points (:, nc ), n0_cap_points (:, 1 ), nf_cap_points (:, 1 )) call me % add_plate ( n0_cap_points (:, nc ), nf_cap_points (:, 1 ), nf_cap_points (:, nc )) end subroutine add_cylinder","tags":"","loc":"proc/add_cylinder.html"},{"title":"add_cone – stl-fortran","text":"private subroutine add_cone(me, v1, v2, radius, num_points, initial_cap, initial_normal) Add a cone to an STL file. The cylinder is specified by the initial and final x,y,z coordinates. Optionally,\n  an initial and final normal vector can be specified (if not specified,\n  then a default one is constructed). Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 coordinates of initial point (bottom of the cone) real(kind=wp), intent(in), dimension(3) :: v2 coordinates of final point (point of the cone) real(kind=wp), intent(in) :: radius radius of the cone (the bottom plate) integer, intent(in) :: num_points number of point on the circle (>=3) logical, intent(in) :: initial_cap add a cap plate to the initial point (bottom) real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial plate (bottom) Calls proc~~add_cone~~CallsGraph proc~add_cone add_cone proc~unit unit proc~add_cone->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code add_cone Source Code subroutine add_cone ( me , v1 , v2 , radius , num_points , initial_cap , initial_normal ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: v1 !! coordinates of initial point (bottom of the cone) real ( wp ), dimension ( 3 ), intent ( in ) :: v2 !! coordinates of final point (point of the cone) real ( wp ), intent ( in ) :: radius !! radius of the cone (the bottom plate) integer , intent ( in ) :: num_points !! number of point on the circle (>=3) logical , intent ( in ) :: initial_cap !! add a cap plate to the initial point (bottom) real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_normal !! outward normal vector for initial plate (bottom) integer :: i !! counter integer :: nc !! number of points on the circle real ( wp ), dimension ( 3 ) :: n0 !! normal vector for initial circle real ( wp ), dimension (:,:), allocatable :: n0_cap_points !! points for the initial cap nc = max ( 3 , num_points ) ! compute the end unit vector: if ( present ( initial_normal )) then n0 = unit ( initial_normal ) else n0 = unit ( v1 - v2 ) end if ! create the points on the initial cap (optionally add the plate) call me % generate_circle ( v1 , radius , n0 , nc , initial_cap , n0_cap_points ) ! draw the cone plates !      *     v2 !     / \\ !    /   \\ !   1--*--2  v1 do i = 1 , nc - 1 call me % add_plate ( n0_cap_points (:, i ), n0_cap_points (:, i + 1 ), v2 ) end do ! last one: call me % add_plate ( n0_cap_points (:, nc ), n0_cap_points (:, 1 ), v2 ) end subroutine add_cone","tags":"","loc":"proc/add_cone.html"},{"title":"generate_circle – stl-fortran","text":"private subroutine generate_circle(me, c, radius, n, nc, add_circle, circle, initial_vector, cw) Generate the points in a circle, and optionally add it as a plate. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: c center of the circle real(kind=wp), intent(in) :: radius radius of the cylinder real(kind=wp), intent(in), dimension(3) :: n normal vector to the circle integer, intent(in) :: nc number of points on the circle (must be at least 3) logical, intent(in) :: add_circle to also add to the circle as a plate real(kind=wp), intent(out), dimension(:,:), allocatable :: circle points on the circle real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the initial circle (x_unit by default) logical, intent(in), optional :: cw generate the points in the clockwise direction abound n (default is false) Calls proc~~generate_circle~~CallsGraph proc~generate_circle generate_circle proc~vector_projection_on_plane vector_projection_on_plane proc~generate_circle->proc~vector_projection_on_plane proc~perpendicular perpendicular proc~generate_circle->proc~perpendicular proc~unit unit proc~generate_circle->proc~unit proc~axis_angle_rotation axis_angle_rotation proc~generate_circle->proc~axis_angle_rotation proc~vector_projection vector_projection proc~vector_projection_on_plane->proc~vector_projection proc~perpendicular->proc~unit proc~axis_angle_rotation->proc~unit proc~cross cross proc~axis_angle_rotation->proc~cross Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code generate_circle Source Code subroutine generate_circle ( me , c , radius , n , nc , add_circle , circle , initial_vector , cw ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension ( 3 ), intent ( in ) :: c !! center of the circle real ( wp ), intent ( in ) :: radius !! radius of the cylinder real ( wp ), dimension ( 3 ), intent ( in ) :: n !! normal vector to the circle integer , intent ( in ) :: nc !! number of points on the circle (must be at least 3) logical , intent ( in ) :: add_circle !! to also add to the circle as a plate real ( wp ), dimension (:,:), allocatable , intent ( out ) :: circle !! points on the circle real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_vector !! vector to use to generate the initial circle (x_unit by default) logical , intent ( in ), optional :: cw !! generate the points in the clockwise direction abound n (default is false) real ( wp ), dimension ( 3 ) :: v !! initial vector for the circle integer :: i !! counter real ( wp ) :: factor !! cw/ccw factor if ( nc < 3 ) error stop 'number of points on a circle must be at least 3' allocate ( circle ( 3 , nc )) ! circle = -999 factor = one if ( present ( cw )) then if ( cw ) factor = - one end if ! start with an initial vector on the circle (perpendicular to n0) ! [project x to circle (or y if x is parallel to n)] if ( present ( initial_vector )) then v = unit ( vector_projection_on_plane ( initial_vector , n )) if (. not . perpendicular ( v , n )) then ! fall back to x or y axis v = unit ( vector_projection_on_plane ( x_unit , n )) if (. not . perpendicular ( v , n )) then v = unit ( vector_projection_on_plane ( y_unit , n )) end if end if else v = unit ( vector_projection_on_plane ( x_unit , n )) if (. not . perpendicular ( v , n )) then v = unit ( vector_projection_on_plane ( y_unit , n )) end if end if v = radius * unit ( v ) ! generate the points by rotating the initial vector around the circle: circle (:, 1 ) = c + v do i = 2 , nc circle (:, i ) = c + axis_angle_rotation ( v , n ,( i - 1 ) * factor * ( 36 0.0_wp / nc )) if ( add_circle ) then ! draw the initial cap call me % add_plate ( c , circle (:, i ), circle (:, i - 1 )) end if end do ! final plate that connects last to first if ( add_circle ) call me % add_plate ( c , circle (:, 1 ), circle (:, nc )) end subroutine generate_circle","tags":"","loc":"proc/generate_circle.html"},{"title":"add_curve – stl-fortran","text":"private subroutine add_curve(me, x, y, z, radius, num_points, initial_cap, initial_normal, final_cap, final_normal, initial_vector) Add a curve to an STL file. A curve is a joined set of cylinders with no internal caps. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x x coordinate array real(kind=wp), intent(in), dimension(:) :: y y coordinate array real(kind=wp), intent(in), dimension(:) :: z z coordinate array real(kind=wp), intent(in) :: radius radius of the cylinder integer, intent(in) :: num_points number of point on the cylinder perimeter logical, intent(in), optional :: initial_cap add a cap plate to the initial point real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial circle logical, intent(in), optional :: final_cap add a cap plate to the final point real(kind=wp), intent(in), optional dimension(3) :: final_normal outward normal vector for final circle real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the first circle (x_unit by default) Calls proc~~add_curve~~CallsGraph proc~add_curve add_curve proc~unit unit proc~add_curve->proc~unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code add_curve Source Code subroutine add_curve ( me , x , y , z , radius , num_points ,& initial_cap , initial_normal , final_cap , final_normal , initial_vector ) implicit none class ( stl_file ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! x coordinate array real ( wp ), dimension (:), intent ( in ) :: y !! y coordinate array real ( wp ), dimension (:), intent ( in ) :: z !! z coordinate array real ( wp ), intent ( in ) :: radius !! radius of the cylinder integer , intent ( in ) :: num_points !! number of point on the cylinder perimeter logical , intent ( in ), optional :: initial_cap !! add a cap plate to the initial point real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_normal !! outward normal vector for initial circle logical , intent ( in ), optional :: final_cap !! add a cap plate to the final point real ( wp ), dimension ( 3 ), intent ( in ), optional :: final_normal !! outward normal vector for final circle real ( wp ), dimension ( 3 ), intent ( in ), optional :: initial_vector !! vector to use to generate the first circle (x_unit by default) integer :: i !! counter integer :: n !! number of points real ( wp ), dimension ( 3 ) :: nv !! for intermediate normal vectors real ( wp ), dimension ( 3 ) :: nv_tmp !! for intermediate normal vectors real ( wp ), dimension ( 3 ) :: v !! for intermediate initial vectors n = min ( size ( x ), size ( y ), size ( z )) if ( n < 2 ) error stop 'error: a curve must have more than one point' ! first cylinder [no final cap unless only two points] call me % add_cylinder ([ x ( 1 ), y ( 1 ), z ( 1 )],& [ x ( 2 ), y ( 2 ), z ( 2 )],& radius , num_points ,& initial_cap = initial_cap , initial_normal = initial_normal , initial_vector = initial_vector ,& final_cap = n == 2 , final_normal_used = nv , final_initial_vector_used = v ) if ( n > 3 ) then ! intermediate cylinders (the initial normal is the final normal from the previous cylinder) do i = 2 , n - 2 call me % add_cylinder ([ x ( i ), y ( i ), z ( i )],& [ x ( i + 1 ), y ( i + 1 ), z ( i + 1 )],& radius , num_points ,& initial_cap = . false ., initial_normal =- nv ,& final_cap = . false ., final_normal_used = nv_tmp ,& initial_vector = v ) nv = unit ( nv_tmp ) end do end if ! last cylinder [no initial cap] if ( n >= 3 ) then call me % add_cylinder ([ x ( n - 1 ), y ( n - 1 ), z ( n - 1 )],& [ x ( n ), y ( n ), z ( n )],& radius , num_points ,& final_cap = final_cap , final_normal = final_normal ,& initial_normal =- nv , initial_cap = . false .,& initial_vector = v ) end if end subroutine add_curve","tags":"","loc":"proc/add_curve.html"},{"title":"stl_module – stl-fortran","text":"STL (STereoLithography) file library. Author Jacob Williams, Jan 12, 2020. License BSD-3 Reference https://en.wikipedia.org/wiki/STL_(file_format) Uses iso_c_binding iso_fortran_env module~~stl_module~~UsesGraph module~stl_module stl_module iso_c_binding iso_c_binding module~stl_module->iso_c_binding iso_fortran_env iso_fortran_env module~stl_module->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables zero one deg2rad x_unit y_unit z_unit Derived Types plate stl_file Functions compute_vertex_scale perpendicular normal unit cross spherical_to_cartesian axis_angle_rotation vector_projection vector_projection_on_plane Subroutines destroy_stl_file set_chunk_size add_plate write_binary_stl_file write_ascii_stl_file shift_mesh add_sphere add_cylinder add_cone generate_circle add_curve Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: zero = 0.0_wp real(kind=wp), private, parameter :: one = 1.0_wp real(kind=wp), private, parameter :: deg2rad = acos(-1.0_wp)/180.0_wp degrees to radians real(kind=wp), private, parameter, dimension(3) :: x_unit = [one, zero, zero] x-axis unit vector real(kind=wp), private, parameter, dimension(3) :: y_unit = [zero, one, zero] y-axis unit vector real(kind=wp), private, parameter, dimension(3) :: z_unit = [zero, zero, one] z-axis unit vector Derived Types type, private :: plate a 3D triangular plate.\n [note that the order of the vertices defines the\n surface normal via the right-hand rule] Components Type Visibility Attributes Name Initial real(kind=wp), public, dimension(3) :: v1 = zero first vertex real(kind=wp), public, dimension(3) :: v2 = zero second vertex real(kind=wp), public, dimension(3) :: v3 = zero third vertex type, public :: stl_file the main class for STL file I/O. Components Type Visibility Attributes Name Initial integer, private :: n_plates = 0 number of plates integer, private :: chunk_size = 1000 expand plates array in chunks of this size type( plate ), private, dimension(:), allocatable :: plates the array of plates Type-Bound Procedures procedure, public :: write_ascii_stl_file procedure, public :: write_binary_stl_file procedure, public :: add_plate procedure, public :: add_sphere procedure, public :: add_cylinder procedure, public :: add_curve procedure, public :: add_cone procedure, public :: generate_circle procedure, public :: shift_mesh procedure, public :: set_chunk_size procedure, public :: destroy => destroy_stl_file procedure, private :: compute_vertex_scale Functions private pure function compute_vertex_scale (me, bounding_box) result(scale) Compute the scale factor for the vertices (for writing to a file). Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) Return Value real(kind=wp) scale factor private pure function perpendicular (v1, v2) result(is_parallel) Returns true if the two vectors are perpendicular. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: v1 real(kind=wp), intent(in), dimension(:) :: v2 Return Value logical private pure function normal (v1, v2, v3) result(n) Normal vector for the plate (computed using right hand rule). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: v1 first vertex of the triangle [x,y,z] real(kind=wp), intent(in), dimension(3) :: v2 second vertex of the triangle [x,y,z] real(kind=wp), intent(in), dimension(3) :: v3 third vertex of the triangle [x,y,z] Return Value real(kind=wp),\n  dimension(3) surface normal vector private pure function unit (r) result(rhat) 3x1 Unit vector. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: r Return Value real(kind=wp),\n  dimension(3) private pure function cross (a, b) result(axb) Vector cross product. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: a real(kind=wp), intent(in), dimension(3) :: b Return Value real(kind=wp),\n  dimension(3) private pure function spherical_to_cartesian (r, alpha, beta) result(rvec) Convert spherical (r,alpha,beta) to Cartesian (x,y,z). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: r magnitude real(kind=wp), intent(in) :: alpha right ascension [deg] real(kind=wp), intent(in) :: beta declination [deg] Return Value real(kind=wp),\n  dimension(3) [x,y,z] vector private pure function axis_angle_rotation (v, k, theta) result(vrot) Author Jacob Williams Date 7/20/2014 Rotate a 3x1 vector in space, given an axis and angle of rotation. Read more… Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: v vector to rotate real(kind=wp), intent(in), dimension(3) :: k rotation axis real(kind=wp), intent(in) :: theta rotation angle [deg] Return Value real(kind=wp),\n  dimension(3) result private pure function vector_projection (a, b) result(c) The projection of one vector onto another vector. Read more… Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: a the original vector real(kind=wp), intent(in), dimension(size(a)) :: b the vector to project on to Return Value real(kind=wp),\n  dimension(size(a)) the projection of a onto b private pure function vector_projection_on_plane (a, b) result(c) Project a vector onto a plane. Read more… Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(3) :: a the original vector real(kind=wp), intent(in), dimension(3) :: b the plane to project on to (a normal vector) Return Value real(kind=wp),\n  dimension(3) the projection of a onto the b plane Subroutines private subroutine destroy_stl_file (me) Destroy an stl_file . Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me private subroutine set_chunk_size (me, chunk_size) Set the chunk size in the class. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me integer, intent(in) :: chunk_size must be >0 private subroutine add_plate (me, v1, v2, v3) Add a plate to the class. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 first vertex real(kind=wp), intent(in), dimension(3) :: v2 second vertex real(kind=wp), intent(in), dimension(3) :: v3 third vertex private subroutine write_binary_stl_file (me, filename, istat, bounding_box) Generate a binary STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me character(len=*), intent(in) :: filename STL file name integer, intent(out) :: istat iostat code real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) private subroutine write_ascii_stl_file (me, filename, modelname, istat, bounding_box) Generate an ascii STL file. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(in) :: me character(len=*), intent(in) :: filename STL file name character(len=*), intent(in) :: modelname the solid name (should not contain spaces) integer, intent(out) :: istat iostat code real(kind=wp), intent(in), optional :: bounding_box scale vertices so that model fits in a\n box of this size (if <=0, no scaling is done) private subroutine shift_mesh (me) Shift the vertex coordinates so that there are no non-positive components. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me private subroutine add_sphere (me, center, radius, num_lat_points, num_lon_points) Add a sphere to an STL file. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: center coordinates of sphere center [x,y,z] real(kind=wp), intent(in) :: radius radius of the sphere integer, intent(in) :: num_lat_points number of latitude points (not counting poles) integer, intent(in) :: num_lon_points number of longitude points private subroutine add_cylinder (me, v1, v2, radius, num_points, initial_cap, final_cap, initial_normal, final_normal, final_normal_used, initial_vector, final_initial_vector_used) Add a cylinder to an STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 coordinates of initial point real(kind=wp), intent(in), dimension(3) :: v2 coordinates of final point real(kind=wp), intent(in) :: radius radius of the cylinder integer, intent(in) :: num_points number of point on the circle (>=3) logical, intent(in) :: initial_cap add a cap plate to the initial point logical, intent(in) :: final_cap add a cap plate to the final point real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial circle real(kind=wp), intent(in), optional dimension(3) :: final_normal outward normal vector for final circle real(kind=wp), intent(out), optional dimension(3) :: final_normal_used outward normal vector for final circle actually used real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the initial circle (x_unit by default) real(kind=wp), intent(out), optional dimension(3) :: final_initial_vector_used the initial vector used for the final cap to generate the points private subroutine add_cone (me, v1, v2, radius, num_points, initial_cap, initial_normal) Add a cone to an STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: v1 coordinates of initial point (bottom of the cone) real(kind=wp), intent(in), dimension(3) :: v2 coordinates of final point (point of the cone) real(kind=wp), intent(in) :: radius radius of the cone (the bottom plate) integer, intent(in) :: num_points number of point on the circle (>=3) logical, intent(in) :: initial_cap add a cap plate to the initial point (bottom) real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial plate (bottom) private subroutine generate_circle (me, c, radius, n, nc, add_circle, circle, initial_vector, cw) Generate the points in a circle, and optionally add it as a plate. Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(3) :: c center of the circle real(kind=wp), intent(in) :: radius radius of the cylinder real(kind=wp), intent(in), dimension(3) :: n normal vector to the circle integer, intent(in) :: nc number of points on the circle (must be at least 3) logical, intent(in) :: add_circle to also add to the circle as a plate real(kind=wp), intent(out), dimension(:,:), allocatable :: circle points on the circle real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the initial circle (x_unit by default) logical, intent(in), optional :: cw generate the points in the clockwise direction abound n (default is false) private subroutine add_curve (me, x, y, z, radius, num_points, initial_cap, initial_normal, final_cap, final_normal, initial_vector) Add a curve to an STL file. Read more… Arguments Type Intent Optional Attributes Name class( stl_file ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x x coordinate array real(kind=wp), intent(in), dimension(:) :: y y coordinate array real(kind=wp), intent(in), dimension(:) :: z z coordinate array real(kind=wp), intent(in) :: radius radius of the cylinder integer, intent(in) :: num_points number of point on the cylinder perimeter logical, intent(in), optional :: initial_cap add a cap plate to the initial point real(kind=wp), intent(in), optional dimension(3) :: initial_normal outward normal vector for initial circle logical, intent(in), optional :: final_cap add a cap plate to the final point real(kind=wp), intent(in), optional dimension(3) :: final_normal outward normal vector for final circle real(kind=wp), intent(in), optional dimension(3) :: initial_vector vector to use to generate the first circle (x_unit by default)","tags":"","loc":"module/stl_module.html"}]}